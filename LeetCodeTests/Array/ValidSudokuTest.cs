using System;
using LeetCode;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace LeetCodeTests.Array
{
    [TestClass]
    public class ValidSudokuTest
    {
        [TestMethod]
        public void ValidateSudokuValidTest()
        {
            char[,] sudoku = new char[9,9]
            {                
                {'.', '8', '7', '6', '5', '4', '3', '2', '1' },
                {'2', '.', '.', '.', '.', '.', '.', '.', '.' },
                {'3', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'4', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'5', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'6', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'7', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'8', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'9', '.', '.', '.', '.', '.', '.', '.', '.'}                
            };

            Assert.AreEqual(true, ArrayProgram.ValidateSudoku(sudoku));
        }

        [TestMethod]
        public void ValidateSudokuInvalidRowTest()
        {
            char[,] sudoku = new char[9, 9]
            {
                {'.', '8', '7', '6', '5', '4', '3', '2', '1' },
                {'2', '.', '.', '.', '.', '.', '.', '.', '.' },
                {'3', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'4', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'5', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'6', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'7', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'8', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'9', '.', '.', '.', '.', '.', '.', '9', '.'}
            };

            Assert.AreEqual(false, ArrayProgram.ValidateSudoku(sudoku));
        }

        [TestMethod]
        public void ValidateSudoku1InvalidColumnTest()
        {
            char[,] sudoku = new char[9, 9]
            {
                {'.', '8', '7', '6', '5', '4', '3', '2', '1' },
                {'2', '.', '.', '.', '.', '.', '.', '.', '.' },
                {'3', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'4', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'5', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'6', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'7', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'8', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'9', '.', '.', '.', '.', '.', '3', '.', '.'}
            };

            Assert.AreEqual(false, ArrayProgram.ValidateSudoku(sudoku));
        }

        [TestMethod]
        public void ValidateSudokuInvalidSquareTest()
        {
            char[,] sudoku = new char[9, 9]
            {
                {'.', '8', '7', '6', '5', '4', '3', '2', '1' },
                {'2', '.', '.', '.', '.', '.', '.', '.', '.' },
                {'3', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'4', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'5', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'6', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'7', '.', '.', '.', '.', '.', '8', '.', '.'},
                {'8', '.', '.', '.', '.', '.', '.', '.', '.'},
                {'9', '.', '.', '.', '.', '.', '.', '8', '.'}
            };

            Assert.AreEqual(false, ArrayProgram.ValidateSudoku(sudoku));
        }
    }
}
